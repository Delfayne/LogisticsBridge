buildscript {
    ext.configFile = file "build.properties"
    configFile.withReader {
        // Load config.  It shall from now be referenced as simply config or project.config
        def prop = new Properties()
        prop.load(it)
        project.ext.config = new ConfigSlurper().parse prop
    }

    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = 'forge'
            url = 'https://files.minecraftforge.net/maven'
        }
    }

    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'java'
apply plugin: 'java-library'

version = '1.0'
archivesBaseName = 'LBTextures'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'stable', version: "${config.mappings_ver}"

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

repositories {
    jcenter()
    maven {
        name = 'JitPack.io'
        url = 'https://jitpack.io'
    }
    maven {
        name = 'forge'
        url = 'https://files.minecraftforge.net/maven'
    }
    maven {
        name = 'minecraftlibs'
        url = 'https://libraries.minecraft.net'
    }
}

dependencies {
    minecraft group: 'net.minecraftforge', name: 'forge', version: "${config.mc_ver}-${config.forge_ver}"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "modversion", project.version
    inputs.property "mcversion", "${config.mc_ver}"

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'modversion':project.version, 'mcversion':"${config.mc_ver}"
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar.finalizedBy('reobfJar')
